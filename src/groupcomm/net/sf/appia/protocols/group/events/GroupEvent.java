/**
 * Appia: Group communication and protocol composition framework library
 * Copyright 2006 University of Lisbon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 *
 * Initial developer(s): Alexandre Pinto and Hugo Miranda.
 * Contributor(s): See Appia web page for a list of contributors.
 */
 
package net.sf.appia.protocols.group.events;

import net.sf.appia.core.*;
import net.sf.appia.protocols.group.Group;
import net.sf.appia.protocols.group.ViewID;



/**
 * Superclass of all {@link net.sf.appia.core.Event Events} generated by the
 * <i>Group Communication protocols</i> that are not <i>sendable</i>.
 * <br>
 * It exetends the regular {@link net.sf.appia.core.Event Event} by adding the
 * {@link net.sf.appia.protocols.group.Group group id} and the
 * {@link net.sf.appia.protocols.group.ViewID view id}.
 * <b>These attributes are mandatory</b>.
 *
 * @author Alexandre Pinto
 * @version 0.1
 * @see net.sf.appia.protocols.group.events.GroupSendableEvent
 */
public class GroupEvent extends Event implements Cloneable {

  /**
   * The {@link net.sf.appia.protocols.group.Group group} to wich it belongs
   */
  public Group group;
  /**
   * The {@link net.sf.appia.protocols.group.ViewID view id} on wich the Event was
   * generated.
   */
  public ViewID view_id;

  /**
   * Constructs an initialized <i>GroupEvent</i>, belonging to the given
   * {@link net.sf.appia.protocols.group.Group group} and
   * {@link net.sf.appia.protocols.group.ViewID view id}.
   *
   * @param channel the {@link net.sf.appia.core.Channel Channel} of the Event
   * @param dir the {@link net.sf.appia.core.Direction Direction} of the Event
   * @param source the {@link net.sf.appia.core.Session Session} that is generating the Event
   * @param group the {@link net.sf.appia.protocols.group.Group Group} of the Event
   * @param view_id the {@link net.sf.appia.protocols.group.ViewID ViewID} of the Event
   * @throws AppiaEventException as the result of calling
   * {@link net.sf.appia.core.Event#Event(Channel,int,Session)
   * Event(Channel,int,Session)}
   */
  public GroupEvent(
          Channel channel, int dir, Session source,
          Group group, ViewID view_id)
    throws AppiaEventException {

    super(channel,dir,source);
    this.group=group;
    this.view_id=view_id;
  }

  /**
   * Constructs an uninitialized <i>GroupEvent</i>, belonging to the given
   * {@link net.sf.appia.protocols.group.Group group} and
   * {@link net.sf.appia.protocols.group.ViewID view id}.
   *
   * @param group the {@link net.sf.appia.protocols.group.Group Group} of the Event
   * @param view_id the {@link net.sf.appia.protocols.group.ViewID ViewID} of the Event
   */
  public GroupEvent(Group group, ViewID view_id) {
    this.group=group;
    this.view_id=view_id;
  }
  
  /**
   * Clones the Event.
   * @return Event
   * @throws CloneNotSupportedException
   */
  public Event cloneEvent() throws CloneNotSupportedException {
	  GroupEvent ev = (GroupEvent) super.cloneEvent();
	  ev.group = group;
	  ev.view_id = view_id;
	  return ev;
  }

}